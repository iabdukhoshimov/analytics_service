// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: types.sql

package sqlc

import (
	"context"
)

const licenseTypesGetAll = `-- name: LicenseTypesGetAll :many
SELECT id, name
FROM license_type
`

func (q *Queries) LicenseTypesGetAll(ctx context.Context) ([]LicenseType, error) {
	rows, err := q.db.Query(ctx, licenseTypesGetAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LicenseType
	for rows.Next() {
		var i LicenseType
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const paymentTypesGetAll = `-- name: PaymentTypesGetAll :many
SELECT id, name
FROM payment_types
`

func (q *Queries) PaymentTypesGetAll(ctx context.Context) ([]PaymentType, error) {
	rows, err := q.db.Query(ctx, paymentTypesGetAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PaymentType
	for rows.Next() {
		var i PaymentType
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const statusesGetAll = `-- name: StatusesGetAll :many
SELECT id, name
FROM STATUS
`

func (q *Queries) StatusesGetAll(ctx context.Context) ([]Status, error) {
	rows, err := q.db.Query(ctx, statusesGetAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Status
	for rows.Next() {
		var i Status
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
