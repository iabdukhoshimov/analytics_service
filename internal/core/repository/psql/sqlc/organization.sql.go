// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: organization.sql

package sqlc

import (
	"context"

	"gopkg.in/guregu/null.v4/zero"
)

const organizationGetAll = `-- name: OrganizationGetAll :many
SELECT id, name, full_name, phone_number, parent_organization, location, created_at, updated_at, deleted_at
FROM organization
WHERE TRUE
    AND CASE
        WHEN $1::VARCHAR != '' THEN name ILIKE '%' || $1 || '%'
        OR full_name ILIKE '%' || $1 || '%'
        OR phone_number ILIKE '%' || $1 || '%'
        OR location ILIKE '%' || $1 || '%'
        ELSE TRUE
    END
    AND CASE
        WHEN $2::VARCHAR != '' THEN parent_organization = $2
        ELSE TRUE
    END
    AND deleted_at IS NULL
ORDER BY name ASC
LIMIT $4 OFFSET $3
`

type OrganizationGetAllParams struct {
	Search             string `json:"search"`
	ParentOrganization string `json:"parent_organization"`
	Offset             int32  `json:"offset"`
	Limit              int32  `json:"limit"`
}

func (q *Queries) OrganizationGetAll(ctx context.Context, arg OrganizationGetAllParams) ([]Organization, error) {
	rows, err := q.db.Query(ctx, organizationGetAll,
		arg.Search,
		arg.ParentOrganization,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.FullName,
			&i.PhoneNumber,
			&i.ParentOrganization,
			&i.Location,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const organizationGetAllCount = `-- name: OrganizationGetAllCount :one
SELECT COUNT(*)
FROM organization
WHERE TRUE
    AND CASE
        WHEN $1::VARCHAR != '' THEN name ILIKE '%' || $1 || '%'
        OR full_name ILIKE '%' || $1 || '%'
        OR phone_number ILIKE '%' || $1 || '%'
        OR location ILIKE '%' || $1 || '%'
        ELSE TRUE
    END
    AND CASE
        WHEN $2::VARCHAR != '' THEN parent_organization = $2
        ELSE TRUE
    END
    AND deleted_at IS NULL
`

type OrganizationGetAllCountParams struct {
	Search             string `json:"search"`
	ParentOrganization string `json:"parent_organization"`
}

func (q *Queries) OrganizationGetAllCount(ctx context.Context, arg OrganizationGetAllCountParams) (int64, error) {
	row := q.db.QueryRow(ctx, organizationGetAllCount, arg.Search, arg.ParentOrganization)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const organizationGetOne = `-- name: OrganizationGetOne :one
SELECT id, name, full_name, phone_number, parent_organization, location, created_at, updated_at, deleted_at
FROM organization
WHERE id = $1
`

func (q *Queries) OrganizationGetOne(ctx context.Context, id string) (Organization, error) {
	row := q.db.QueryRow(ctx, organizationGetOne, id)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.FullName,
		&i.PhoneNumber,
		&i.ParentOrganization,
		&i.Location,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const organizationInsertOne = `-- name: OrganizationInsertOne :one
INSERT INTO organization (
        name,
        full_name,
        phone_number,
        parent_organization,
        location
    )
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5
    )
RETURNING id
`

type OrganizationInsertOneParams struct {
	Name               string      `json:"name"`
	FullName           string      `json:"full_name"`
	PhoneNumber        string      `json:"phone_number"`
	ParentOrganization zero.String `json:"parent_organization"`
	Location           zero.String `json:"location"`
}

func (q *Queries) OrganizationInsertOne(ctx context.Context, arg OrganizationInsertOneParams) (string, error) {
	row := q.db.QueryRow(ctx, organizationInsertOne,
		arg.Name,
		arg.FullName,
		arg.PhoneNumber,
		arg.ParentOrganization,
		arg.Location,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}
