// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: permissions.sql

package sqlc

import (
	"context"
)

const permissionGetOneByRoleAndPath = `-- name: PermissionGetOneByRoleAndPath :one
SELECT roles.name AS role_name,
    paths.path AS path,
    permissions.can_insert AS can_insert,
    permissions.can_update AS can_update,
    permissions.can_delete AS can_delete,
    permissions.can_read AS can_read
FROM permissions
    JOIN roles ON roles.id = permissions.role_id
    JOIN paths ON paths.id = permissions.path_id
WHERE roles.id = $1
    AND paths.path = $2
LIMIT 1
`

type PermissionGetOneByRoleAndPathParams struct {
	RoleID int32  `json:"role_id"`
	Path   string `json:"path"`
}

type PermissionGetOneByRoleAndPathRow struct {
	RoleName  string `json:"role_name"`
	Path      string `json:"path"`
	CanInsert bool   `json:"can_insert"`
	CanUpdate bool   `json:"can_update"`
	CanDelete bool   `json:"can_delete"`
	CanRead   bool   `json:"can_read"`
}

func (q *Queries) PermissionGetOneByRoleAndPath(ctx context.Context, arg PermissionGetOneByRoleAndPathParams) (PermissionGetOneByRoleAndPathRow, error) {
	row := q.db.QueryRow(ctx, permissionGetOneByRoleAndPath, arg.RoleID, arg.Path)
	var i PermissionGetOneByRoleAndPathRow
	err := row.Scan(
		&i.RoleName,
		&i.Path,
		&i.CanInsert,
		&i.CanUpdate,
		&i.CanDelete,
		&i.CanRead,
	)
	return i, err
}
